// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace ConsumingWebsite.Clients.DataService
{
    using ConsumingWebsite.Clients;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DataService.
    /// </summary>
    public static partial class DataServiceExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void GetHealthCheck(this IDataService operations)
            {
                operations.GetHealthCheckAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetHealthCheckAsync(this IDataService operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetHealthCheckWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<BlogPostModel> GetBlogPosts(this IDataService operations)
            {
                return operations.GetBlogPostsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<BlogPostModel>> GetBlogPostsAsync(this IDataService operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBlogPostsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static BlogPostModel GetBlogPostById(this IDataService operations, string id)
            {
                return operations.GetBlogPostByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BlogPostModel> GetBlogPostByIdAsync(this IDataService operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBlogPostByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tag'>
            /// </param>
            public static IList<BlogPostModel> GetBlogPostsByTag(this IDataService operations, string tag)
            {
                return operations.GetBlogPostsByTagAsync(tag).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tag'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<BlogPostModel>> GetBlogPostsByTagAsync(this IDataService operations, string tag, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBlogPostsByTagWithHttpMessagesAsync(tag, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
